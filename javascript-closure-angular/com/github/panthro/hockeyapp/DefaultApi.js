/**
 * @fileoverview AUTOMATICALLY GENERATED service for com.github.panthro.hockeyapp.DefaultApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 * Version: 0.0.2
 * Generated by: class io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('com.github.panthro.hockeyapp.DefaultApi');

goog.require('API.Client.App');
goog.require('API.Client.Apps');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
com.github.panthro.hockeyapp.DefaultApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DefaultApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DefaultApiBasePath')) :
                   'https://rink.hockeyapp.net/api/2';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DefaultApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DefaultApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
com.github.panthro.hockeyapp.DefaultApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Gets &#x60;Apps&#x60;. 
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!com.github.panthro.hockeyapp.Apps>}
 */
com.github.panthro.hockeyapp.DefaultApi.prototype.appsGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Upload a new app
 * @param {!Object} ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android
 * @param {!Object=} opt_dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
 * @param {!string=} opt_notes release notes as Textile or Markdown (after 5k characters note are truncated)
 * @param {!number=} opt_notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown
 * @param {!number=} opt_notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers
 * @param {!number=} opt_status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download
 * @param {!string=} opt_strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number
 * @param {!Array<!string>=} opt_tags restrict download to comma-separated list of tags
 * @param {!Array<!number>=} opt_teams restrict download to comma-separated list of team IDs
 * @param {!Array<!number>=} opt_users restrict download to comma-separated list of user IDs
 * @param {!number=} opt_mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory
 * @param {!number=} opt_releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise
 * @param {!boolean=} opt__private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;)
 * @param {!number=} opt_ownerId set to the ID of your organization
 * @param {!string=} opt_commitSha set to the git commit sha for this build
 * @param {!string=} opt_buildServerUrl set to the URL of the build job on your build server
 * @param {!string=} opt_repositoryUrl set to your source repository
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!com.github.panthro.hockeyapp.App>}
 */
com.github.panthro.hockeyapp.DefaultApi.prototype.appsUploadPost = function(ipa, opt_dsym, opt_notes, opt_notesType, opt_notify, opt_status, opt_strategy, opt_tags, opt_teams, opt_users, opt_mandatory, opt_releaseType, opt__private, opt_ownerId, opt_commitSha, opt_buildServerUrl, opt_repositoryUrl, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/apps/upload';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'ipa' is set
  if (!ipa) {
    throw new Error('Missing required parameter ipa when calling appsUploadPost');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['Ipa'] = ipa;

  formParams['dsym'] = opt_dsym;

  formParams['notes'] = opt_notes;

  formParams['notes_type'] = opt_notesType;

  formParams['notify'] = opt_notify;

  formParams['status'] = opt_status;

  formParams['strategy'] = opt_strategy;

  formParams['tags'] = opt_tags;

  formParams['teams'] = opt_teams;

  formParams['users'] = opt_users;

  formParams['mandatory'] = opt_mandatory;

  formParams['release_type'] = opt_releaseType;

  formParams['private'] = opt__private;

  formParams['owner_id'] = opt_ownerId;

  formParams['commit_sha'] = opt_commitSha;

  formParams['build_server_url'] = opt_buildServerUrl;

  formParams['repository_url'] = opt_repositoryUrl;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
