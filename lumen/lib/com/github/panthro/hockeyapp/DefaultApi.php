<?php

/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class DefaultApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation appsGet
     *
     * .
     *
     *
     * @return Http response
     */
    public function appsGet()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing appsGet as a GET method ?');
    }
    /**
     * Operation appsUploadPost
     *
     * .
     *
     *
     * @return Http response
     */
    public function appsUploadPost()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['ipa'])) {
            throw new \InvalidArgumentException('Missing the required parameter $ipa when calling appsUploadPost');
        }
        $ipa = $input['ipa'];

        $dsym = $input['dsym'];

        $notes = $input['notes'];

        $notes_type = $input['notes_type'];

        $notify = $input['notify'];

        $status = $input['status'];

        $strategy = $input['strategy'];

        $tags = $input['tags'];

        $teams = $input['teams'];

        $users = $input['users'];

        $mandatory = $input['mandatory'];

        $release_type = $input['release_type'];

        $private = $input['private'];

        $owner_id = $input['owner_id'];

        $commit_sha = $input['commit_sha'];

        $build_server_url = $input['build_server_url'];

        $repository_url = $input['repository_url'];


        return response('How about implementing appsUploadPost as a POST method ?');
    }
}
