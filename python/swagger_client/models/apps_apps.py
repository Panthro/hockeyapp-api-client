# coding: utf-8

"""
    Hockeyapp Public API wrapper

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class AppsApps(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, title=None, bundle_identifier=None, public_identifier=None, device_family=None, minimum_os_version=None, release_type=None, status=None, platform=None):
        """
        AppsApps - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'title': 'str',
            'bundle_identifier': 'str',
            'public_identifier': 'str',
            'device_family': 'str',
            'minimum_os_version': 'str',
            'release_type': 'int',
            'status': 'int',
            'platform': 'str'
        }

        self.attribute_map = {
            'title': 'title',
            'bundle_identifier': 'bundle_identifier',
            'public_identifier': 'public_identifier',
            'device_family': 'device_family',
            'minimum_os_version': 'minimum_os_version',
            'release_type': 'release_type',
            'status': 'status',
            'platform': 'platform'
        }

        self._title = title
        self._bundle_identifier = bundle_identifier
        self._public_identifier = public_identifier
        self._device_family = device_family
        self._minimum_os_version = minimum_os_version
        self._release_type = release_type
        self._status = status
        self._platform = platform


    @property
    def title(self):
        """
        Gets the title of this AppsApps.


        :return: The title of this AppsApps.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this AppsApps.


        :param title: The title of this AppsApps.
        :type: str
        """

        self._title = title

    @property
    def bundle_identifier(self):
        """
        Gets the bundle_identifier of this AppsApps.


        :return: The bundle_identifier of this AppsApps.
        :rtype: str
        """
        return self._bundle_identifier

    @bundle_identifier.setter
    def bundle_identifier(self, bundle_identifier):
        """
        Sets the bundle_identifier of this AppsApps.


        :param bundle_identifier: The bundle_identifier of this AppsApps.
        :type: str
        """

        self._bundle_identifier = bundle_identifier

    @property
    def public_identifier(self):
        """
        Gets the public_identifier of this AppsApps.


        :return: The public_identifier of this AppsApps.
        :rtype: str
        """
        return self._public_identifier

    @public_identifier.setter
    def public_identifier(self, public_identifier):
        """
        Sets the public_identifier of this AppsApps.


        :param public_identifier: The public_identifier of this AppsApps.
        :type: str
        """

        self._public_identifier = public_identifier

    @property
    def device_family(self):
        """
        Gets the device_family of this AppsApps.


        :return: The device_family of this AppsApps.
        :rtype: str
        """
        return self._device_family

    @device_family.setter
    def device_family(self, device_family):
        """
        Sets the device_family of this AppsApps.


        :param device_family: The device_family of this AppsApps.
        :type: str
        """

        self._device_family = device_family

    @property
    def minimum_os_version(self):
        """
        Gets the minimum_os_version of this AppsApps.


        :return: The minimum_os_version of this AppsApps.
        :rtype: str
        """
        return self._minimum_os_version

    @minimum_os_version.setter
    def minimum_os_version(self, minimum_os_version):
        """
        Sets the minimum_os_version of this AppsApps.


        :param minimum_os_version: The minimum_os_version of this AppsApps.
        :type: str
        """

        self._minimum_os_version = minimum_os_version

    @property
    def release_type(self):
        """
        Gets the release_type of this AppsApps.


        :return: The release_type of this AppsApps.
        :rtype: int
        """
        return self._release_type

    @release_type.setter
    def release_type(self, release_type):
        """
        Sets the release_type of this AppsApps.


        :param release_type: The release_type of this AppsApps.
        :type: int
        """

        self._release_type = release_type

    @property
    def status(self):
        """
        Gets the status of this AppsApps.


        :return: The status of this AppsApps.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this AppsApps.


        :param status: The status of this AppsApps.
        :type: int
        """

        self._status = status

    @property
    def platform(self):
        """
        Gets the platform of this AppsApps.


        :return: The platform of this AppsApps.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this AppsApps.


        :param platform: The platform of this AppsApps.
        :type: str
        """
        allowed_values = ["iOS", "Android", "Mac Os", "Windows Phone", "Custom"]
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
