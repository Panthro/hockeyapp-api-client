# coding: utf-8

"""
    Hockeyapp Public API wrapper

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 0.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def apps_get(self, **kwargs):
        """
        
        Gets `Apps`. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apps_get(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Apps
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apps_get_with_http_info(**kwargs)
        else:
            (data) = self.apps_get_with_http_info(**kwargs)
            return data

    def apps_get_with_http_info(self, **kwargs):
        """
        
        Gets `Apps`. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apps_get_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Apps
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_get" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/apps'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept([])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type([])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='Apps',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)

    def apps_upload_post(self, ipa, **kwargs):
        """
        
        Upload a new app

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apps_upload_post(ipa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file ipa: file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android (required)
        :param file dsym: file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
        :param str notes: release notes as Textile or Markdown (after 5k characters note are truncated)
        :param int notes_type: type of release notes. `0` for Textile, `1` for Markdown
        :param int notify: notify testers (can only be set with full-access tokens). `0` to not notify, `1` to notify all testers that can install this app,  `2` to notify all testers
        :param int status: download status (can only be set with full-access tokens). `1` to not allow users to download the version, `2` to make the version available for download
        :param str strategy: replace or add build with same build number. `add` to add the build as a new build to even if it has the same build number __default__, `replace` to replace to a build with the same build number
        :param list[str] tags: restrict download to comma-separated list of tags
        :param list[int] teams: restrict download to comma-separated list of team IDs
        :param list[int] users: restrict download to comma-separated list of user IDs
        :param int mandatory: set version as mandatory `0` for not mandatory __default__, `1` for mandatory
        :param int release_type: set the release type of the app. `0` for beta __default__  `1` for store `2` for alpha `3` for enterprise
        :param bool private: set to `true` to enable the private download page (default is `true`)
        :param int owner_id: set to the ID of your organization
        :param str commit_sha: set to the git commit sha for this build
        :param str build_server_url: set to the URL of the build job on your build server
        :param str repository_url: set to your source repository
        :return: App
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.apps_upload_post_with_http_info(ipa, **kwargs)
        else:
            (data) = self.apps_upload_post_with_http_info(ipa, **kwargs)
            return data

    def apps_upload_post_with_http_info(self, ipa, **kwargs):
        """
        
        Upload a new app

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.apps_upload_post_with_http_info(ipa, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file ipa: file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android (required)
        :param file dsym: file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
        :param str notes: release notes as Textile or Markdown (after 5k characters note are truncated)
        :param int notes_type: type of release notes. `0` for Textile, `1` for Markdown
        :param int notify: notify testers (can only be set with full-access tokens). `0` to not notify, `1` to notify all testers that can install this app,  `2` to notify all testers
        :param int status: download status (can only be set with full-access tokens). `1` to not allow users to download the version, `2` to make the version available for download
        :param str strategy: replace or add build with same build number. `add` to add the build as a new build to even if it has the same build number __default__, `replace` to replace to a build with the same build number
        :param list[str] tags: restrict download to comma-separated list of tags
        :param list[int] teams: restrict download to comma-separated list of team IDs
        :param list[int] users: restrict download to comma-separated list of user IDs
        :param int mandatory: set version as mandatory `0` for not mandatory __default__, `1` for mandatory
        :param int release_type: set the release type of the app. `0` for beta __default__  `1` for store `2` for alpha `3` for enterprise
        :param bool private: set to `true` to enable the private download page (default is `true`)
        :param int owner_id: set to the ID of your organization
        :param str commit_sha: set to the git commit sha for this build
        :param str build_server_url: set to the URL of the build job on your build server
        :param str repository_url: set to your source repository
        :return: App
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ipa', 'dsym', 'notes', 'notes_type', 'notify', 'status', 'strategy', 'tags', 'teams', 'users', 'mandatory', 'release_type', 'private', 'owner_id', 'commit_sha', 'build_server_url', 'repository_url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method apps_upload_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ipa' is set
        if ('ipa' not in params) or (params['ipa'] is None):
            raise ValueError("Missing the required parameter `ipa` when calling `apps_upload_post`")


        collection_formats = {}

        resource_path = '/apps/upload'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'ipa' in params:
            local_var_files['Ipa'] = params['ipa']
        if 'dsym' in params:
            local_var_files['dsym'] = params['dsym']
        if 'notes' in params:
            form_params.append(('notes', params['notes']))
        if 'notes_type' in params:
            form_params.append(('notes_type', params['notes_type']))
        if 'notify' in params:
            form_params.append(('notify', params['notify']))
        if 'status' in params:
            form_params.append(('status', params['status']))
        if 'strategy' in params:
            form_params.append(('strategy', params['strategy']))
        if 'tags' in params:
            form_params.append(('tags', params['tags']))
            collection_formats['tags'] = 'multi'
        if 'teams' in params:
            form_params.append(('teams', params['teams']))
            collection_formats['teams'] = 'multi'
        if 'users' in params:
            form_params.append(('users', params['users']))
            collection_formats['users'] = 'multi'
        if 'mandatory' in params:
            form_params.append(('mandatory', params['mandatory']))
        if 'release_type' in params:
            form_params.append(('release_type', params['release_type']))
        if 'private' in params:
            form_params.append(('private', params['private']))
        if 'owner_id' in params:
            form_params.append(('owner_id', params['owner_id']))
        if 'commit_sha' in params:
            form_params.append(('commit_sha', params['commit_sha']))
        if 'build_server_url' in params:
            form_params.append(('build_server_url', params['build_server_url']))
        if 'repository_url' in params:
            form_params.append(('repository_url', params['repository_url']))

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['token']

        return self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='App',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'),
                                            collection_formats=collection_formats)
