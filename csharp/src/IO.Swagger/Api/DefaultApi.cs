/* 
 * Hockeyapp Public API wrapper
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Apps&#x60;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Apps</returns>
        Apps AppsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Apps&#x60;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Apps</returns>
        ApiResponse<Apps> AppsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>App</returns>
        App AppsUploadPost (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>ApiResponse of App</returns>
        ApiResponse<App> AppsUploadPostWithHttpInfo (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Apps&#x60;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Apps</returns>
        System.Threading.Tasks.Task<Apps> AppsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Apps&#x60;. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Apps)</returns>
        System.Threading.Tasks.Task<ApiResponse<Apps>> AppsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>Task of App</returns>
        System.Threading.Tasks.Task<App> AppsUploadPostAsync (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Upload a new app
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>Task of ApiResponse (App)</returns>
        System.Threading.Tasks.Task<ApiResponse<App>> AppsUploadPostAsyncWithHttpInfo (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets &#x60;Apps&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Apps</returns>
        public Apps AppsGet ()
        {
             ApiResponse<Apps> localVarResponse = AppsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets &#x60;Apps&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Apps</returns>
        public ApiResponse< Apps > AppsGetWithHttpInfo ()
        {

            var localVarPath = "/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-HockeyAppToken")))
            {
                localVarHeaderParams["X-HockeyAppToken"] = Configuration.GetApiKeyWithPrefix("X-HockeyAppToken");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Apps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Apps) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Apps)));
            
        }

        /// <summary>
        ///  Gets &#x60;Apps&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Apps</returns>
        public async System.Threading.Tasks.Task<Apps> AppsGetAsync ()
        {
             ApiResponse<Apps> localVarResponse = await AppsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets &#x60;Apps&#x60;. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Apps)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Apps>> AppsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-HockeyAppToken")))
            {
                localVarHeaderParams["X-HockeyAppToken"] = Configuration.GetApiKeyWithPrefix("X-HockeyAppToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Apps>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Apps) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Apps)));
            
        }

        /// <summary>
        ///  Upload a new app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>App</returns>
        public App AppsUploadPost (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null)
        {
             ApiResponse<App> localVarResponse = AppsUploadPostWithHttpInfo(ipa, dsym, notes, notesType, notify, status, strategy, tags, teams, users, mandatory, releaseType, _private, ownerId, commitSha, buildServerUrl, repositoryUrl);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Upload a new app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>ApiResponse of App</returns>
        public ApiResponse< App > AppsUploadPostWithHttpInfo (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null)
        {
            // verify the required parameter 'ipa' is set
            if (ipa == null)
                throw new ApiException(400, "Missing required parameter 'ipa' when calling DefaultApi->AppsUploadPost");

            var localVarPath = "/apps/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ipa != null) localVarFileParams.Add("Ipa", Configuration.ApiClient.ParameterToFile("Ipa", ipa));
            if (dsym != null) localVarFileParams.Add("dsym", Configuration.ApiClient.ParameterToFile("dsym", dsym));
            if (notes != null) localVarFormParams.Add("notes", Configuration.ApiClient.ParameterToString(notes)); // form parameter
            if (notesType != null) localVarFormParams.Add("notes_type", Configuration.ApiClient.ParameterToString(notesType)); // form parameter
            if (notify != null) localVarFormParams.Add("notify", Configuration.ApiClient.ParameterToString(notify)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (strategy != null) localVarFormParams.Add("strategy", Configuration.ApiClient.ParameterToString(strategy)); // form parameter
            if (tags != null) localVarFormParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // form parameter
            if (teams != null) localVarFormParams.Add("teams", Configuration.ApiClient.ParameterToString(teams)); // form parameter
            if (users != null) localVarFormParams.Add("users", Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (mandatory != null) localVarFormParams.Add("mandatory", Configuration.ApiClient.ParameterToString(mandatory)); // form parameter
            if (releaseType != null) localVarFormParams.Add("release_type", Configuration.ApiClient.ParameterToString(releaseType)); // form parameter
            if (_private != null) localVarFormParams.Add("private", Configuration.ApiClient.ParameterToString(_private)); // form parameter
            if (ownerId != null) localVarFormParams.Add("owner_id", Configuration.ApiClient.ParameterToString(ownerId)); // form parameter
            if (commitSha != null) localVarFormParams.Add("commit_sha", Configuration.ApiClient.ParameterToString(commitSha)); // form parameter
            if (buildServerUrl != null) localVarFormParams.Add("build_server_url", Configuration.ApiClient.ParameterToString(buildServerUrl)); // form parameter
            if (repositoryUrl != null) localVarFormParams.Add("repository_url", Configuration.ApiClient.ParameterToString(repositoryUrl)); // form parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-HockeyAppToken")))
            {
                localVarHeaderParams["X-HockeyAppToken"] = Configuration.GetApiKeyWithPrefix("X-HockeyAppToken");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<App>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (App) Configuration.ApiClient.Deserialize(localVarResponse, typeof(App)));
            
        }

        /// <summary>
        ///  Upload a new app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>Task of App</returns>
        public async System.Threading.Tasks.Task<App> AppsUploadPostAsync (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null)
        {
             ApiResponse<App> localVarResponse = await AppsUploadPostAsyncWithHttpInfo(ipa, dsym, notes, notesType, notify, status, strategy, tags, teams, users, mandatory, releaseType, _private, ownerId, commitSha, buildServerUrl, repositoryUrl);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Upload a new app
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>
        /// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>
        /// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>
        /// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>
        /// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>
        /// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>
        /// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>
        /// <param name="tags">restrict download to comma-separated list of tags (optional)</param>
        /// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>
        /// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>
        /// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>
        /// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>
        /// <param name="_private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>
        /// <param name="ownerId">set to the ID of your organization (optional)</param>
        /// <param name="commitSha">set to the git commit sha for this build (optional)</param>
        /// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>
        /// <param name="repositoryUrl">set to your source repository (optional)</param>
        /// <returns>Task of ApiResponse (App)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<App>> AppsUploadPostAsyncWithHttpInfo (System.IO.Stream ipa, System.IO.Stream dsym = null, string notes = null, int? notesType = null, int? notify = null, int? status = null, string strategy = null, List<string> tags = null, List<int?> teams = null, List<int?> users = null, int? mandatory = null, int? releaseType = null, bool? _private = null, int? ownerId = null, string commitSha = null, string buildServerUrl = null, string repositoryUrl = null)
        {
            // verify the required parameter 'ipa' is set
            if (ipa == null)
                throw new ApiException(400, "Missing required parameter 'ipa' when calling DefaultApi->AppsUploadPost");

            var localVarPath = "/apps/upload";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (ipa != null) localVarFileParams.Add("Ipa", Configuration.ApiClient.ParameterToFile("Ipa", ipa));
            if (dsym != null) localVarFileParams.Add("dsym", Configuration.ApiClient.ParameterToFile("dsym", dsym));
            if (notes != null) localVarFormParams.Add("notes", Configuration.ApiClient.ParameterToString(notes)); // form parameter
            if (notesType != null) localVarFormParams.Add("notes_type", Configuration.ApiClient.ParameterToString(notesType)); // form parameter
            if (notify != null) localVarFormParams.Add("notify", Configuration.ApiClient.ParameterToString(notify)); // form parameter
            if (status != null) localVarFormParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // form parameter
            if (strategy != null) localVarFormParams.Add("strategy", Configuration.ApiClient.ParameterToString(strategy)); // form parameter
            if (tags != null) localVarFormParams.Add("tags", Configuration.ApiClient.ParameterToString(tags)); // form parameter
            if (teams != null) localVarFormParams.Add("teams", Configuration.ApiClient.ParameterToString(teams)); // form parameter
            if (users != null) localVarFormParams.Add("users", Configuration.ApiClient.ParameterToString(users)); // form parameter
            if (mandatory != null) localVarFormParams.Add("mandatory", Configuration.ApiClient.ParameterToString(mandatory)); // form parameter
            if (releaseType != null) localVarFormParams.Add("release_type", Configuration.ApiClient.ParameterToString(releaseType)); // form parameter
            if (_private != null) localVarFormParams.Add("private", Configuration.ApiClient.ParameterToString(_private)); // form parameter
            if (ownerId != null) localVarFormParams.Add("owner_id", Configuration.ApiClient.ParameterToString(ownerId)); // form parameter
            if (commitSha != null) localVarFormParams.Add("commit_sha", Configuration.ApiClient.ParameterToString(commitSha)); // form parameter
            if (buildServerUrl != null) localVarFormParams.Add("build_server_url", Configuration.ApiClient.ParameterToString(buildServerUrl)); // form parameter
            if (repositoryUrl != null) localVarFormParams.Add("repository_url", Configuration.ApiClient.ParameterToString(repositoryUrl)); // form parameter

            // authentication (token) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("X-HockeyAppToken")))
            {
                localVarHeaderParams["X-HockeyAppToken"] = Configuration.GetApiKeyWithPrefix("X-HockeyAppToken");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AppsUploadPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<App>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (App) Configuration.ApiClient.Deserialize(localVarResponse, typeof(App)));
            
        }

    }
}
