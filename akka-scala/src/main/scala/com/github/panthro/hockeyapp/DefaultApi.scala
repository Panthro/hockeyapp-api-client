/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package com.github.panthro.hockeyapp

import io.swagger.client.model.Apps
import io.swagger.client.model.App
import java.io.File
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DefaultApi {

  /**
   * Gets &#x60;Apps&#x60;. 
   * 
   * Expected answers:
   *   code 200 : Apps (Successful response)
   *   code 400 :  (Bad request)
   * 
   * Available security schemes:
   *   token (apiKey)
   */
  def appsGet()(implicit apiKey: ApiKeyValue): ApiRequest[Apps] =
    ApiRequest[Apps](ApiMethods.GET, "https://rink.hockeyapp.net/api/2", "/apps", "application/json")
      .withApiKey(apiKey, "X-HockeyAppToken", HEADER)
      .withSuccessResponse[Apps](200)
      .withErrorResponse[Unit](400)
        /**
   * Upload a new app
   * 
   * Expected answers:
   *   code 201 : App (Upload success)
   *   code 400 :  (Bad request)
   * 
   * Available security schemes:
   *   token (apiKey)
   * 
   * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android
   * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
   * @param notes release notes as Textile or Markdown (after 5k characters note are truncated)
   * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown
   * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers
   * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download
   * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number
   * @param tags restrict download to comma-separated list of tags
   * @param teams restrict download to comma-separated list of team IDs
   * @param users restrict download to comma-separated list of user IDs
   * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory
   * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise
   * @param &#x60;private&#x60; set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;)
   * @param ownerId set to the ID of your organization
   * @param commitSha set to the git commit sha for this build
   * @param buildServerUrl set to the URL of the build job on your build server
   * @param repositoryUrl set to your source repository
   */
  def appsUploadPost(ipa: File, dsym: Option[File] = None, notes: Option[String] = None, notesType: Option[Int] = None, notify: Option[Int] = None, status: Option[Int] = None, strategy: Option[String] = None, tags: Seq[String], teams: Seq[Int], users: Seq[Int], mandatory: Option[Int] = None, releaseType: Option[Int] = None, &#x60;private&#x60;: Option[Boolean] = None, ownerId: Option[Int] = None, commitSha: Option[String] = None, buildServerUrl: Option[String] = None, repositoryUrl: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[App] =
    ApiRequest[App](ApiMethods.POST, "https://rink.hockeyapp.net/api/2", "/apps/upload", "multipart/form-data")
      .withApiKey(apiKey, "X-HockeyAppToken", HEADER)
      .withFormParam("Ipa", ipa)
      .withFormParam("dsym", dsym)
      .withFormParam("notes", notes)
      .withFormParam("notes_type", notesType)
      .withFormParam("notify", notify)
      .withFormParam("status", status)
      .withFormParam("strategy", strategy)
      .withFormParam("tags", ArrayValues(tags, MULTI))
      .withFormParam("teams", ArrayValues(teams, MULTI))
      .withFormParam("users", ArrayValues(users, MULTI))
      .withFormParam("mandatory", mandatory)
      .withFormParam("release_type", releaseType)
      .withFormParam("private", &#x60;private&#x60;)
      .withFormParam("owner_id", ownerId)
      .withFormParam("commit_sha", commitSha)
      .withFormParam("build_server_url", buildServerUrl)
      .withFormParam("repository_url", repositoryUrl)
      .withSuccessResponse[App](201)
      .withErrorResponse[Unit](400)
      

}

