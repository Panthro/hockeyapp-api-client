/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/// <reference path="api.d.ts" />

/* tslint:disable:no-unused-variable member-ordering */

namespace com.github.panthro.hockeyapp {
    'use strict';

    export class DefaultApi {
        protected basePath = 'https://rink.hockeyapp.net/api/2';
        public defaultHeaders : any = {};

        static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

        constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
            if (basePath !== undefined) {
                this.basePath = basePath;
            }
        }

        private extendObj<T1,T2>(objA: T1, objB: T2) {
            for(let key in objB){
                if(objB.hasOwnProperty(key)){
                    objA[key] = objB[key];
                }
            }
            return <T1&T2>objA;
        }

        /**
         * 
         * Gets &#x60;Apps&#x60;. 
         */
        public appsGet (extraHttpRequestParams?: any ) : ng.IHttpPromise<Apps> {
            const localVarPath = this.basePath + '/apps';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let httpRequestParams: any = {
                method: 'GET',
                url: localVarPath,
                json: true,
                                                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
        /**
         * 
         * Upload a new app
         * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android
         * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
         * @param notes release notes as Textile or Markdown (after 5k characters note are truncated)
         * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown
         * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers
         * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download
         * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number
         * @param tags restrict download to comma-separated list of tags
         * @param teams restrict download to comma-separated list of team IDs
         * @param users restrict download to comma-separated list of user IDs
         * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory
         * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise
         * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;)
         * @param ownerId set to the ID of your organization
         * @param commitSha set to the git commit sha for this build
         * @param buildServerUrl set to the URL of the build job on your build server
         * @param repositoryUrl set to your source repository
         */
        public appsUploadPost (ipa: any, dsym?: any, notes?: string, notesType?: number, notify?: number, status?: number, strategy?: string, tags?: Array<string>, teams?: Array<number>, users?: Array<number>, mandatory?: number, releaseType?: number, _private?: boolean, ownerId?: number, commitSha?: string, buildServerUrl?: string, repositoryUrl?: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<App> {
            const localVarPath = this.basePath + '/apps/upload';

            let queryParameters: any = {};
            let headerParams: any = this.extendObj({}, this.defaultHeaders);
            let formParams: any = {};

            // verify required parameter 'ipa' is not null or undefined
            if (ipa === null || ipa === undefined) {
                throw new Error('Required parameter ipa was null or undefined when calling appsUploadPost.');
            }
            headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

            formParams['Ipa'] = ipa;

            formParams['dsym'] = dsym;

            formParams['notes'] = notes;

            formParams['notes_type'] = notesType;

            formParams['notify'] = notify;

            formParams['status'] = status;

            formParams['strategy'] = strategy;

            formParams['tags'] = tags;

            formParams['teams'] = teams;

            formParams['users'] = users;

            formParams['mandatory'] = mandatory;

            formParams['release_type'] = releaseType;

            formParams['private'] = _private;

            formParams['owner_id'] = ownerId;

            formParams['commit_sha'] = commitSha;

            formParams['build_server_url'] = buildServerUrl;

            formParams['repository_url'] = repositoryUrl;

            let httpRequestParams: any = {
                method: 'POST',
                url: localVarPath,
                json: false,
                                data: this.$httpParamSerializer(formParams),
                params: queryParameters,
                headers: headerParams
            };

            if (extraHttpRequestParams) {
                httpRequestParams = this.extendObj(httpRequestParams, extraHttpRequestParams);
            }

            return this.$http(httpRequestParams);
        }
    }
}
