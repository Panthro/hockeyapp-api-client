/*
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.github.panthro.hockeyapp;

import com.github.panthro.ApiCallback;
import com.github.panthro.ApiClient;
import com.github.panthro.ApiException;
import com.github.panthro.ApiResponse;
import com.github.panthro.Configuration;
import com.github.panthro.Pair;
import com.github.panthro.ProgressRequestBody;
import com.github.panthro.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import io.swagger.client.model.Apps;
import io.swagger.client.model.App;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for appsAppIdDelete */
    private com.squareup.okhttp.Call appsAppIdDeleteCall(String appId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling appsAppIdDelete(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/apps/{appId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "appId" + "\\}", apiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * delete an existing app
     * @param appId the app id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void appsAppIdDelete(String appId) throws ApiException {
        appsAppIdDeleteWithHttpInfo(appId);
    }

    /**
     * 
     * delete an existing app
     * @param appId the app id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> appsAppIdDeleteWithHttpInfo(String appId) throws ApiException {
        com.squareup.okhttp.Call call = appsAppIdDeleteCall(appId, null, null);
        return apiClient.execute(call);
    }

    /**
     *  (asynchronously)
     * delete an existing app
     * @param appId the app id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appsAppIdDeleteAsync(String appId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appsAppIdDeleteCall(appId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for appsGet */
    private com.squareup.okhttp.Call appsGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        

        // create path and map variables
        String localVarPath = "/apps".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Gets &#x60;Apps&#x60;. 
     * @return Apps
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Apps appsGet() throws ApiException {
        ApiResponse<Apps> resp = appsGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Gets &#x60;Apps&#x60;. 
     * @return ApiResponse&lt;Apps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Apps> appsGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = appsGetCall(null, null);
        Type localVarReturnType = new TypeToken<Apps>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets &#x60;Apps&#x60;. 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appsGetAsync(final ApiCallback<Apps> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appsGetCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Apps>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for appsUploadPost */
    private com.squareup.okhttp.Call appsUploadPostCall(File ipa, File dsym, String notes, Integer notesType, Integer notify, Integer status, String strategy, List<String> tags, List<Integer> teams, List<Integer> users, Integer mandatory, Integer releaseType, Boolean _private, Integer ownerId, String commitSha, String buildServerUrl, String repositoryUrl, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'ipa' is set
        if (ipa == null) {
            throw new ApiException("Missing the required parameter 'ipa' when calling appsUploadPost(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/apps/upload".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (ipa != null)
        localVarFormParams.put("Ipa", ipa);
        if (dsym != null)
        localVarFormParams.put("dsym", dsym);
        if (notes != null)
        localVarFormParams.put("notes", notes);
        if (notesType != null)
        localVarFormParams.put("notes_type", notesType);
        if (notify != null)
        localVarFormParams.put("notify", notify);
        if (status != null)
        localVarFormParams.put("status", status);
        if (strategy != null)
        localVarFormParams.put("strategy", strategy);
        if (tags != null)
        localVarFormParams.put("tags", tags);
        if (teams != null)
        localVarFormParams.put("teams", teams);
        if (users != null)
        localVarFormParams.put("users", users);
        if (mandatory != null)
        localVarFormParams.put("mandatory", mandatory);
        if (releaseType != null)
        localVarFormParams.put("release_type", releaseType);
        if (_private != null)
        localVarFormParams.put("private", _private);
        if (ownerId != null)
        localVarFormParams.put("owner_id", ownerId);
        if (commitSha != null)
        localVarFormParams.put("commit_sha", commitSha);
        if (buildServerUrl != null)
        localVarFormParams.put("build_server_url", buildServerUrl);
        if (repositoryUrl != null)
        localVarFormParams.put("repository_url", repositoryUrl);

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "token" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * 
     * Upload a new app
     * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android (required)
     * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
     * @param notes release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
     * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
     * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
     * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
     * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
     * @param tags restrict download to comma-separated list of tags (optional)
     * @param teams restrict download to comma-separated list of team IDs (optional)
     * @param users restrict download to comma-separated list of user IDs (optional)
     * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
     * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
     * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
     * @param ownerId set to the ID of your organization (optional)
     * @param commitSha set to the git commit sha for this build (optional)
     * @param buildServerUrl set to the URL of the build job on your build server (optional)
     * @param repositoryUrl set to your source repository (optional)
     * @return App
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public App appsUploadPost(File ipa, File dsym, String notes, Integer notesType, Integer notify, Integer status, String strategy, List<String> tags, List<Integer> teams, List<Integer> users, Integer mandatory, Integer releaseType, Boolean _private, Integer ownerId, String commitSha, String buildServerUrl, String repositoryUrl) throws ApiException {
        ApiResponse<App> resp = appsUploadPostWithHttpInfo(ipa, dsym, notes, notesType, notify, status, strategy, tags, teams, users, mandatory, releaseType, _private, ownerId, commitSha, buildServerUrl, repositoryUrl);
        return resp.getData();
    }

    /**
     * 
     * Upload a new app
     * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android (required)
     * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
     * @param notes release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
     * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
     * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
     * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
     * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
     * @param tags restrict download to comma-separated list of tags (optional)
     * @param teams restrict download to comma-separated list of team IDs (optional)
     * @param users restrict download to comma-separated list of user IDs (optional)
     * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
     * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
     * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
     * @param ownerId set to the ID of your organization (optional)
     * @param commitSha set to the git commit sha for this build (optional)
     * @param buildServerUrl set to the URL of the build job on your build server (optional)
     * @param repositoryUrl set to your source repository (optional)
     * @return ApiResponse&lt;App&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<App> appsUploadPostWithHttpInfo(File ipa, File dsym, String notes, Integer notesType, Integer notify, Integer status, String strategy, List<String> tags, List<Integer> teams, List<Integer> users, Integer mandatory, Integer releaseType, Boolean _private, Integer ownerId, String commitSha, String buildServerUrl, String repositoryUrl) throws ApiException {
        com.squareup.okhttp.Call call = appsUploadPostCall(ipa, dsym, notes, notesType, notify, status, strategy, tags, teams, users, mandatory, releaseType, _private, ownerId, commitSha, buildServerUrl, repositoryUrl, null, null);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload a new app
     * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android (required)
     * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
     * @param notes release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
     * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
     * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
     * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
     * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
     * @param tags restrict download to comma-separated list of tags (optional)
     * @param teams restrict download to comma-separated list of team IDs (optional)
     * @param users restrict download to comma-separated list of user IDs (optional)
     * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
     * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
     * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
     * @param ownerId set to the ID of your organization (optional)
     * @param commitSha set to the git commit sha for this build (optional)
     * @param buildServerUrl set to the URL of the build job on your build server (optional)
     * @param repositoryUrl set to your source repository (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call appsUploadPostAsync(File ipa, File dsym, String notes, Integer notesType, Integer notify, Integer status, String strategy, List<String> tags, List<Integer> teams, List<Integer> users, Integer mandatory, Integer releaseType, Boolean _private, Integer ownerId, String commitSha, String buildServerUrl, String repositoryUrl, final ApiCallback<App> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = appsUploadPostCall(ipa, dsym, notes, notesType, notify, status, strategy, tags, teams, users, mandatory, releaseType, _private, ownerId, commitSha, buildServerUrl, repositoryUrl, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<App>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
