/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import request = require('request');
import http = require('http');
import Promise = require('bluebird');

let defaultBasePath = 'https://rink.hockeyapp.net/api/2';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */

export class App {
    'title': string;
    'bundleIdentifier': string;
    'publicIdentifier': string;
    'releaseType': number;
    'platform': App.PlatformEnum;
}

export namespace App {
    export enum PlatformEnum {
        IOS = <any> 'iOS',
        Android = <any> 'Android',
        MacOs = <any> 'Mac Os',
        WindowsPhone = <any> 'Windows Phone',
        Custom = <any> 'Custom'
    }
}
export class Apps {
    'success': string;
    'apps': Array<AppsApps>;
}

export class AppsApps {
    'title': string;
    'bundleIdentifier': string;
    'publicIdentifier': string;
    'deviceFamily': string;
    'minimumOsVersion': string;
    'releaseType': number;
    'status': number;
    'platform': AppsApps.PlatformEnum;
}

export namespace AppsApps {
    export enum PlatformEnum {
        IOS = <any> 'iOS',
        Android = <any> 'Android',
        MacOs = <any> 'Mac Os',
        WindowsPhone = <any> 'Windows Phone',
        Custom = <any> 'Custom'
    }
}

export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: request.Options): void;
}

export class HttpBasicAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        requestOptions.auth = {
            username: this.username, password: this.password
        }
    }
}

export class ApiKeyAuth implements Authentication {
    public apiKey: string;

    constructor(private location: string, private paramName: string) {
    }

    applyToRequest(requestOptions: request.Options): void {
        if (this.location == "query") {
            (<any>requestOptions.qs)[this.paramName] = this.apiKey;
        } else if (this.location == "header") {
            requestOptions.headers[this.paramName] = this.apiKey;
        }
    }
}

export class OAuth implements Authentication {
    public accessToken: string;

    applyToRequest(requestOptions: request.Options): void {
        requestOptions.headers["Authorization"] = "Bearer " + this.accessToken;
    }
}

export class VoidAuth implements Authentication {
    public username: string;
    public password: string;
    applyToRequest(requestOptions: request.Options): void {
        // Do nothing
    }
}

export enum DefaultApiApiKeys {
    token,
}

export class DefaultApi {
    protected basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'token': new ApiKeyAuth('header', 'X-HockeyAppToken'),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    public setApiKey(key: DefaultApiApiKeys, value: string) {
        this.authentications[DefaultApiApiKeys[key]].apiKey = value;
    }
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                objA[key] = objB[key];
            }
        }
        return <T1&T2>objA;
    }
    /**
     * 
     * Gets &#x60;Apps&#x60;. 
     */
    public appsGet () : Promise<{ response: http.ClientResponse; body: Apps;  }> {
        const localVarPath = this.basePath + '/apps';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        let useFormData = false;

        let requestOptions: request.Options = {
            method: 'GET',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.token.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: Apps;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * 
     * Upload a new app
     * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android
     * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
     * @param notes release notes as Textile or Markdown (after 5k characters note are truncated)
     * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown
     * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers
     * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download
     * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number
     * @param tags restrict download to comma-separated list of tags
     * @param teams restrict download to comma-separated list of team IDs
     * @param users restrict download to comma-separated list of user IDs
     * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory
     * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise
     * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;)
     * @param ownerId set to the ID of your organization
     * @param commitSha set to the git commit sha for this build
     * @param buildServerUrl set to the URL of the build job on your build server
     * @param repositoryUrl set to your source repository
     */
    public appsUploadPost (ipa: any, dsym?: any, notes?: string, notesType?: number, notify?: number, status?: number, strategy?: string, tags?: Array<string>, teams?: Array<number>, users?: Array<number>, mandatory?: number, releaseType?: number, _private?: boolean, ownerId?: number, commitSha?: string, buildServerUrl?: string, repositoryUrl?: string) : Promise<{ response: http.ClientResponse; body: App;  }> {
        const localVarPath = this.basePath + '/apps/upload';
        let queryParameters: any = {};
        let headerParams: any = this.extendObj({}, this.defaultHeaders);
        let formParams: any = {};


        // verify required parameter 'ipa' is not null or undefined
        if (ipa === null || ipa === undefined) {
            throw new Error('Required parameter ipa was null or undefined when calling appsUploadPost.');
        }

        let useFormData = false;

        if (ipa !== undefined) {
            formParams['Ipa'] = ipa;
        }
        useFormData = true;

        if (dsym !== undefined) {
            formParams['dsym'] = dsym;
        }
        useFormData = true;

        if (notes !== undefined) {
            formParams['notes'] = notes;
        }

        if (notesType !== undefined) {
            formParams['notes_type'] = notesType;
        }

        if (notify !== undefined) {
            formParams['notify'] = notify;
        }

        if (status !== undefined) {
            formParams['status'] = status;
        }

        if (strategy !== undefined) {
            formParams['strategy'] = strategy;
        }

        if (tags !== undefined) {
            formParams['tags'] = tags;
        }

        if (teams !== undefined) {
            formParams['teams'] = teams;
        }

        if (users !== undefined) {
            formParams['users'] = users;
        }

        if (mandatory !== undefined) {
            formParams['mandatory'] = mandatory;
        }

        if (releaseType !== undefined) {
            formParams['release_type'] = releaseType;
        }

        if (_private !== undefined) {
            formParams['private'] = _private;
        }

        if (ownerId !== undefined) {
            formParams['owner_id'] = ownerId;
        }

        if (commitSha !== undefined) {
            formParams['commit_sha'] = commitSha;
        }

        if (buildServerUrl !== undefined) {
            formParams['build_server_url'] = buildServerUrl;
        }

        if (repositoryUrl !== undefined) {
            formParams['repository_url'] = repositoryUrl;
        }

        let requestOptions: request.Options = {
            method: 'POST',
            qs: queryParameters,
            headers: headerParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.token.applyToRequest(requestOptions);

        this.authentications.default.applyToRequest(requestOptions);

        if (Object.keys(formParams).length) {
            if (useFormData) {
                (<any>requestOptions).formData = formParams;
            } else {
                requestOptions.form = formParams;
            }
        }
        return new Promise<{ response: http.ClientResponse; body: App;  }>((resolve, reject) => {
            request(requestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
