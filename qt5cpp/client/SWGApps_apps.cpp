/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#include "SWGApps_apps.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {


SWGApps_apps::SWGApps_apps(QString* json) {
    init();
    this->fromJson(*json);
}

SWGApps_apps::SWGApps_apps() {
    init();
}

SWGApps_apps::~SWGApps_apps() {
    this->cleanup();
}

void
SWGApps_apps::init() {
    title = new QString("");
bundle_identifier = new QString("");
public_identifier = new QString("");
device_family = new QString("");
minimum_os_version = new QString("");
release_type = 0;
status = 0;
platform = new QString("");
}

void
SWGApps_apps::cleanup() {
    if(title != NULL) {
        delete title;
    }
if(bundle_identifier != NULL) {
        delete bundle_identifier;
    }
if(public_identifier != NULL) {
        delete public_identifier;
    }
if(device_family != NULL) {
        delete device_family;
    }
if(minimum_os_version != NULL) {
        delete minimum_os_version;
    }


if(platform != NULL) {
        delete platform;
    }
}

SWGApps_apps*
SWGApps_apps::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGApps_apps::fromJsonObject(QJsonObject &pJson) {
    setValue(&title, pJson["title"], "QString", "QString");
setValue(&bundle_identifier, pJson["bundle_identifier"], "QString", "QString");
setValue(&public_identifier, pJson["public_identifier"], "QString", "QString");
setValue(&device_family, pJson["device_family"], "QString", "QString");
setValue(&minimum_os_version, pJson["minimum_os_version"], "QString", "QString");
setValue(&release_type, pJson["release_type"], "qint32", "");
setValue(&status, pJson["status"], "qint32", "");
setValue(&platform, pJson["platform"], "QString", "QString");
}

QString
SWGApps_apps::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGApps_apps::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    
    toJsonValue(QString("title"), title, obj, QString("QString"));
    
        

    
    toJsonValue(QString("bundle_identifier"), bundle_identifier, obj, QString("QString"));
    
        

    
    toJsonValue(QString("public_identifier"), public_identifier, obj, QString("QString"));
    
        

    
    toJsonValue(QString("device_family"), device_family, obj, QString("QString"));
    
        

    
    toJsonValue(QString("minimum_os_version"), minimum_os_version, obj, QString("QString"));
    
        
obj->insert("release_type", QJsonValue(release_type));
obj->insert("status", QJsonValue(status));

    
    toJsonValue(QString("platform"), platform, obj, QString("QString"));
    
        

    return obj;
}

QString*
SWGApps_apps::getTitle() {
    return title;
}
void
SWGApps_apps::setTitle(QString* title) {
    this->title = title;
}

QString*
SWGApps_apps::getBundleIdentifier() {
    return bundle_identifier;
}
void
SWGApps_apps::setBundleIdentifier(QString* bundle_identifier) {
    this->bundle_identifier = bundle_identifier;
}

QString*
SWGApps_apps::getPublicIdentifier() {
    return public_identifier;
}
void
SWGApps_apps::setPublicIdentifier(QString* public_identifier) {
    this->public_identifier = public_identifier;
}

QString*
SWGApps_apps::getDeviceFamily() {
    return device_family;
}
void
SWGApps_apps::setDeviceFamily(QString* device_family) {
    this->device_family = device_family;
}

QString*
SWGApps_apps::getMinimumOsVersion() {
    return minimum_os_version;
}
void
SWGApps_apps::setMinimumOsVersion(QString* minimum_os_version) {
    this->minimum_os_version = minimum_os_version;
}

qint32
SWGApps_apps::getReleaseType() {
    return release_type;
}
void
SWGApps_apps::setReleaseType(qint32 release_type) {
    this->release_type = release_type;
}

qint32
SWGApps_apps::getStatus() {
    return status;
}
void
SWGApps_apps::setStatus(qint32 status) {
    this->status = status;
}

QString*
SWGApps_apps::getPlatform() {
    return platform;
}
void
SWGApps_apps::setPlatform(QString* platform) {
    this->platform = platform;
}



} /* namespace Swagger */

