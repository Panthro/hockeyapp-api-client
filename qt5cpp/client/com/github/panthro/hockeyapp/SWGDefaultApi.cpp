/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "SWGDefaultApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {
SWGDefaultApi::SWGDefaultApi() {}

SWGDefaultApi::~SWGDefaultApi() {}

SWGDefaultApi::SWGDefaultApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGDefaultApi::appsGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");

    



    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::appsGetCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::appsGetCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGApps* output = static_cast<SWGApps*>(create(json, QString("SWGApps")));
    

    worker->deleteLater();

    emit appsGetSignal(output);
    
}
void
SWGDefaultApi::appsUploadPost(SWGHttpRequestInputFileElement* ipa, SWGHttpRequestInputFileElement* dsym, QString* notes, qint32 notesType, qint32 notify, qint32 status, QString* strategy, QList<QString*>* tags, QList<qint32>* teams, QList<qint32>* users, qint32 mandatory, qint32 releaseType, bool private, qint32 ownerId, QString* commitSha, QString* buildServerUrl, QString* repositoryUrl) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/apps/upload");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");

    if (ipa != NULL) {
        input.add_file("ipa", (*ipa).local_filename, (*ipa).request_filename, (*ipa).mime_type);
    }
if (dsym != NULL) {
        input.add_file("dsym", (*dsym).local_filename, (*dsym).request_filename, (*dsym).mime_type);
    }
if (notes != NULL) {
        input.add_var("notes", *notes);
    }
if (notesType != NULL) {
        input.add_var("notesType", *notesType);
    }
if (notify != NULL) {
        input.add_var("notify", *notify);
    }
if (status != NULL) {
        input.add_var("status", *status);
    }
if (strategy != NULL) {
        input.add_var("strategy", *strategy);
    }
if (tags != NULL) {
        input.add_var("tags", *tags);
    }
if (teams != NULL) {
        input.add_var("teams", *teams);
    }
if (users != NULL) {
        input.add_var("users", *users);
    }
if (mandatory != NULL) {
        input.add_var("mandatory", *mandatory);
    }
if (releaseType != NULL) {
        input.add_var("releaseType", *releaseType);
    }
if (private != NULL) {
        input.add_var("private", *private);
    }
if (ownerId != NULL) {
        input.add_var("ownerId", *ownerId);
    }
if (commitSha != NULL) {
        input.add_var("commitSha", *commitSha);
    }
if (buildServerUrl != NULL) {
        input.add_var("buildServerUrl", *buildServerUrl);
    }
if (repositoryUrl != NULL) {
        input.add_var("repositoryUrl", *repositoryUrl);
    }




    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGDefaultApi::appsUploadPostCallback);

    worker->execute(&input);
}

void
SWGDefaultApi::appsUploadPostCallback(HttpRequestWorker * worker) {
    QString msg;
    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    
        QString json(worker->response);
    SWGApp* output = static_cast<SWGApp*>(create(json, QString("SWGApp")));
    

    worker->deleteLater();

    emit appsUploadPostSignal(output);
    
}
} /* namespace Swagger */
