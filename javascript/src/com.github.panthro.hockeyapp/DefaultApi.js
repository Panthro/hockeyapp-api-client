/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Apps', 'model/App'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Apps'), require('../model/App'));
  } else {
    // Browser globals (root is window)
    if (!root.HockeyappPublicApiWrapper) {
      root.HockeyappPublicApiWrapper = {};
    }
    root.HockeyappPublicApiWrapper.DefaultApi = factory(root.HockeyappPublicApiWrapper.ApiClient, root.HockeyappPublicApiWrapper.Apps, root.HockeyappPublicApiWrapper.App);
  }
}(this, function(ApiClient, Apps, App) {
  'use strict';

  /**
   * Default service.
   * @module com.github.panthro.hockeyapp/DefaultApi
   * @version 0.0.2
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:com.github.panthro.hockeyapp/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the appsGet operation.
     * @callback module:com.github.panthro.hockeyapp/DefaultApi~appsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Apps} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets &#x60;Apps&#x60;. 
     * @param {module:com.github.panthro.hockeyapp/DefaultApi~appsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Apps}
     */
    this.appsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = Apps;

      return this.apiClient.callApi(
        '/apps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the appsUploadPost operation.
     * @callback module:com.github.panthro.hockeyapp/DefaultApi~appsUploadPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/App} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload a new app
     * @param {File} ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android
     * @param {Object} opts Optional parameters
     * @param {File} opts.dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
     * @param {String} opts.notes release notes as Textile or Markdown (after 5k characters note are truncated)
     * @param {Number} opts.notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown
     * @param {Number} opts.notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers
     * @param {Number} opts.status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download
     * @param {module:model/String} opts.strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number
     * @param {Array.<String>} opts.tags restrict download to comma-separated list of tags
     * @param {Array.<Number>} opts.teams restrict download to comma-separated list of team IDs
     * @param {Array.<Number>} opts.users restrict download to comma-separated list of user IDs
     * @param {Number} opts.mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory
     * @param {Number} opts.releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise
     * @param {Boolean} opts._private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;)
     * @param {Number} opts.ownerId set to the ID of your organization
     * @param {String} opts.commitSha set to the git commit sha for this build
     * @param {String} opts.buildServerUrl set to the URL of the build job on your build server
     * @param {String} opts.repositoryUrl set to your source repository
     * @param {module:com.github.panthro.hockeyapp/DefaultApi~appsUploadPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/App}
     */
    this.appsUploadPost = function(ipa, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'ipa' is set
      if (ipa == undefined || ipa == null) {
        throw "Missing the required parameter 'ipa' when calling appsUploadPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'Ipa': ipa,
        'dsym': opts['dsym'],
        'notes': opts['notes'],
        'notes_type': opts['notesType'],
        'notify': opts['notify'],
        'status': opts['status'],
        'strategy': opts['strategy'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi'),
        'teams': this.apiClient.buildCollectionParam(opts['teams'], 'multi'),
        'users': this.apiClient.buildCollectionParam(opts['users'], 'multi'),
        'mandatory': opts['mandatory'],
        'release_type': opts['releaseType'],
        'private': opts['_private'],
        'owner_id': opts['ownerId'],
        'commit_sha': opts['commitSha'],
        'build_server_url': opts['buildServerUrl'],
        'repository_url': opts['repositoryUrl']
      };

      var authNames = ['token'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = App;

      return this.apiClient.callApi(
        '/apps/upload', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
