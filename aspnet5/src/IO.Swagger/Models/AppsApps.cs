/*
 * Hockeyapp Public API wrapper
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppsApps :  IEquatable<AppsApps>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppsApps" /> class.
        /// </summary>
        /// <param name="Title">Title.</param>
        /// <param name="BundleIdentifier">BundleIdentifier.</param>
        /// <param name="PublicIdentifier">PublicIdentifier.</param>
        /// <param name="DeviceFamily">DeviceFamily.</param>
        /// <param name="MinimumOsVersion">MinimumOsVersion.</param>
        /// <param name="ReleaseType">ReleaseType.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Platform">Platform.</param>
        public AppsApps(string Title = null, string BundleIdentifier = null, string PublicIdentifier = null, string DeviceFamily = null, string MinimumOsVersion = null, int? ReleaseType = null, int? Status = null, string Platform = null)
        {
            this.Title = Title;
            this.BundleIdentifier = BundleIdentifier;
            this.PublicIdentifier = PublicIdentifier;
            this.DeviceFamily = DeviceFamily;
            this.MinimumOsVersion = MinimumOsVersion;
            this.ReleaseType = ReleaseType;
            this.Status = Status;
            this.Platform = Platform;
            
        }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets BundleIdentifier
        /// </summary>
        [DataMember(Name="bundle_identifier")]
        public string BundleIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets PublicIdentifier
        /// </summary>
        [DataMember(Name="public_identifier")]
        public string PublicIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets DeviceFamily
        /// </summary>
        [DataMember(Name="device_family")]
        public string DeviceFamily { get; set; }

        /// <summary>
        /// Gets or Sets MinimumOsVersion
        /// </summary>
        [DataMember(Name="minimum_os_version")]
        public string MinimumOsVersion { get; set; }

        /// <summary>
        /// Gets or Sets ReleaseType
        /// </summary>
        [DataMember(Name="release_type")]
        public int? ReleaseType { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public int? Status { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform")]
        public string Platform { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppsApps {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  BundleIdentifier: ").Append(BundleIdentifier).Append("\n");
            sb.Append("  PublicIdentifier: ").Append(PublicIdentifier).Append("\n");
            sb.Append("  DeviceFamily: ").Append(DeviceFamily).Append("\n");
            sb.Append("  MinimumOsVersion: ").Append(MinimumOsVersion).Append("\n");
            sb.Append("  ReleaseType: ").Append(ReleaseType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((AppsApps)obj);
        }

        /// <summary>
        /// Returns true if AppsApps instances are equal
        /// </summary>
        /// <param name="other">Instance of AppsApps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppsApps other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.BundleIdentifier == other.BundleIdentifier ||
                    this.BundleIdentifier != null &&
                    this.BundleIdentifier.Equals(other.BundleIdentifier)
                ) && 
                (
                    this.PublicIdentifier == other.PublicIdentifier ||
                    this.PublicIdentifier != null &&
                    this.PublicIdentifier.Equals(other.PublicIdentifier)
                ) && 
                (
                    this.DeviceFamily == other.DeviceFamily ||
                    this.DeviceFamily != null &&
                    this.DeviceFamily.Equals(other.DeviceFamily)
                ) && 
                (
                    this.MinimumOsVersion == other.MinimumOsVersion ||
                    this.MinimumOsVersion != null &&
                    this.MinimumOsVersion.Equals(other.MinimumOsVersion)
                ) && 
                (
                    this.ReleaseType == other.ReleaseType ||
                    this.ReleaseType != null &&
                    this.ReleaseType.Equals(other.ReleaseType)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Platform == other.Platform ||
                    this.Platform != null &&
                    this.Platform.Equals(other.Platform)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                    if (this.BundleIdentifier != null)
                    hash = hash * 59 + this.BundleIdentifier.GetHashCode();
                    if (this.PublicIdentifier != null)
                    hash = hash * 59 + this.PublicIdentifier.GetHashCode();
                    if (this.DeviceFamily != null)
                    hash = hash * 59 + this.DeviceFamily.GetHashCode();
                    if (this.MinimumOsVersion != null)
                    hash = hash * 59 + this.MinimumOsVersion.GetHashCode();
                    if (this.ReleaseType != null)
                    hash = hash * 59 + this.ReleaseType.GetHashCode();
                    if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                    if (this.Platform != null)
                    hash = hash * 59 + this.Platform.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(AppsApps left, AppsApps right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppsApps left, AppsApps right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
