/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.panthro.hockeyapp

import com.wordnik.client.model.Apps
import com.wordnik.client.model.App
import java.io.File

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class DefaultApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "DefaultApi"
  override protected val applicationName: Option[String] = Some("/api/2/Default")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val appsGetOperation = (apiOperation[Apps]("appsGet")
      summary ""
      parameters()
  )

  get("/apps",operation(appsGetOperation)) {
  }

  

  val appsUploadPostOperation = (apiOperation[App]("appsUploadPost")
      summary ""
      parameters(formParam[File]("ipa").description(""), formParam[File]("dsym").description("").optional, formParam[String]("notes").description("").optional, formParam[Int]("notesType").description("").optional, formParam[Int]("notify").description("").optional, formParam[Int]("status").description("").optional, formParam[String]("strategy").description("").optional, formParam[List[String]]("tags").description("").optional, formParam[List[Int]]("teams").description("").optional, formParam[List[Int]]("users").description("").optional, formParam[Int]("mandatory").description("").optional, formParam[Int]("releaseType").description("").optional, formParam[Boolean]("_private").description("").optional, formParam[Int]("ownerId").description("").optional, formParam[String]("commitSha").description("").optional, formParam[String]("buildServerUrl").description("").optional, formParam[String]("repositoryUrl").description("").optional)
  )

  post("/apps/upload",operation(appsUploadPostOperation)) {
    val ipa = fileParams("ipa")
        println("ipa: " + ipa)
    val dsym = fileParams("dsym")
        println("dsym: " + dsym)
    
    
          val notes = params.getAs[String]("notes")

    println("notes: " + notes)
    
    
          val notesType = params.getAs[Int]("notesType")

    println("notesType: " + notesType)
    
    
          val notify = params.getAs[Int]("notify")

    println("notify: " + notify)
    
    
          val status = params.getAs[Int]("status")

    println("status: " + status)
    
    
          val strategy = params.getAs[String]("strategy")

    println("strategy: " + strategy)
    
    
          val tags = params.getAs[List[String]]("tags")

    println("tags: " + tags)
    
    
          val teams = params.getAs[List[Int]]("teams")

    println("teams: " + teams)
    
    
          val users = params.getAs[List[Int]]("users")

    println("users: " + users)
    
    
          val mandatory = params.getAs[Int]("mandatory")

    println("mandatory: " + mandatory)
    
    
          val releaseType = params.getAs[Int]("releaseType")

    println("releaseType: " + releaseType)
    
    
          val _private = params.getAs[Boolean]("_private")

    println("_private: " + _private)
    
    
          val ownerId = params.getAs[Int]("ownerId")

    println("ownerId: " + ownerId)
    
    
          val commitSha = params.getAs[String]("commitSha")

    println("commitSha: " + commitSha)
    
    
          val buildServerUrl = params.getAs[String]("buildServerUrl")

    println("buildServerUrl: " + buildServerUrl)
    
    
          val repositoryUrl = params.getAs[String]("repositoryUrl")

    println("repositoryUrl: " + repositoryUrl)
  }

}
