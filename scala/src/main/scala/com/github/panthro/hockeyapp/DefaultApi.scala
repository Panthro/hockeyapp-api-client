/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.github.panthro.hockeyapp

import io.swagger.client.model.Apps
import io.swagger.client.model.App
import java.io.File
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class DefaultApi(val defBasePath: String = "https://rink.hockeyapp.net/api/2",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * Gets &#x60;Apps&#x60;. 
   * @return Apps
   */
  def appsGet(): Option[Apps] = {
    // create path and map variables
    val path = "/apps".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[Apps]).asInstanceOf[Apps])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Upload a new app
   * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android 
   * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
   * @param notes release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
   * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
   * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
   * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
   * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
   * @param tags restrict download to comma-separated list of tags (optional)
   * @param teams restrict download to comma-separated list of team IDs (optional)
   * @param users restrict download to comma-separated list of user IDs (optional)
   * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
   * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
   * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
   * @param ownerId set to the ID of your organization (optional)
   * @param commitSha set to the git commit sha for this build (optional)
   * @param buildServerUrl set to the URL of the build job on your build server (optional)
   * @param repositoryUrl set to your source repository (optional)
   * @return App
   */
  def appsUploadPost(ipa: File, dsym: Option[File] = None, notes: Option[String] = None, notesType: Option[Integer] = None, notify: Option[Integer] = None, status: Option[Integer] = None, strategy: Option[String] = None, tags: Option[List[String]] = None, teams: Option[List[Integer]] = None, users: Option[List[Integer]] = None, mandatory: Option[Integer] = None, releaseType: Option[Integer] = None, _private: Option[Boolean] = None, ownerId: Option[Integer] = None, commitSha: Option[String] = None, buildServerUrl: Option[String] = None, repositoryUrl: Option[String] = None): Option[App] = {
    // create path and map variables
    val path = "/apps/upload".replaceAll("\\{format\\}", "json")

    val contentTypes = List("multipart/form-data")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (ipa == null) throw new Exception("Missing required parameter 'ipa' when calling DefaultApi->appsUploadPost")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      mp.field("Ipa", file.getName)
      mp.bodyPart(new FileDataBodyPart("Ipa", ipa, MediaType.MULTIPART_FORM_DATA_TYPE))
      file.map(fileVal => mp.field("dsym", fileVal.getName))
      dsym.map(paramVal => mp.bodyPart(new FileDataBodyPart("dsym", paramVal, MediaType.MULTIPART_FORM_DATA_TYPE)))
      notes.map(paramVal => mp.field("notes", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      notesType.map(paramVal => mp.field("notes_type", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      notify.map(paramVal => mp.field("notify", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      status.map(paramVal => mp.field("status", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      strategy.map(paramVal => mp.field("strategy", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      tags.map(paramVal => mp.field("tags", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      teams.map(paramVal => mp.field("teams", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      users.map(paramVal => mp.field("users", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      mandatory.map(paramVal => mp.field("mandatory", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      releaseType.map(paramVal => mp.field("release_type", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      _private.map(paramVal => mp.field("private", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      ownerId.map(paramVal => mp.field("owner_id", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      commitSha.map(paramVal => mp.field("commit_sha", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      buildServerUrl.map(paramVal => mp.field("build_server_url", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      repositoryUrl.map(paramVal => mp.field("repository_url", paramVal.toString, MediaType.MULTIPART_FORM_DATA_TYPE))
      postBody = mp
    } else {
      notes.map(paramVal => formParams += "notes" -> paramVal.toString)
      notesType.map(paramVal => formParams += "notes_type" -> paramVal.toString)
      notify.map(paramVal => formParams += "notify" -> paramVal.toString)
      status.map(paramVal => formParams += "status" -> paramVal.toString)
      strategy.map(paramVal => formParams += "strategy" -> paramVal.toString)
      tags.map(paramVal => formParams += "tags" -> paramVal.toString)
      teams.map(paramVal => formParams += "teams" -> paramVal.toString)
      users.map(paramVal => formParams += "users" -> paramVal.toString)
      mandatory.map(paramVal => formParams += "mandatory" -> paramVal.toString)
      releaseType.map(paramVal => formParams += "release_type" -> paramVal.toString)
      _private.map(paramVal => formParams += "private" -> paramVal.toString)
      ownerId.map(paramVal => formParams += "owner_id" -> paramVal.toString)
      commitSha.map(paramVal => formParams += "commit_sha" -> paramVal.toString)
      buildServerUrl.map(paramVal => formParams += "build_server_url" -> paramVal.toString)
      repositoryUrl.map(paramVal => formParams += "repository_url" -> paramVal.toString)
    }

    try {
      apiInvoker.invokeApi(basePath, path, "POST", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(ApiInvoker.deserialize(s, "", classOf[App]).asInstanceOf[App])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
