/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH }                                         from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class DefaultApi {
    protected basePath = 'https://rink.hockeyapp.net/api/2';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * Gets &#x60;Apps&#x60;. 
     */
    public appsGet(extraHttpRequestParams?: any): Observable<models.Apps> {
        return this.appsGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Upload a new app
     * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android
     * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
     * @param notes release notes as Textile or Markdown (after 5k characters note are truncated)
     * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown
     * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers
     * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download
     * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number
     * @param tags restrict download to comma-separated list of tags
     * @param teams restrict download to comma-separated list of team IDs
     * @param users restrict download to comma-separated list of user IDs
     * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory
     * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise
     * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;)
     * @param ownerId set to the ID of your organization
     * @param commitSha set to the git commit sha for this build
     * @param buildServerUrl set to the URL of the build job on your build server
     * @param repositoryUrl set to your source repository
     */
    public appsUploadPost(ipa: any, dsym?: any, notes?: string, notesType?: number, notify?: number, status?: number, strategy?: string, tags?: Array<string>, teams?: Array<number>, users?: Array<number>, mandatory?: number, releaseType?: number, _private?: boolean, ownerId?: number, commitSha?: string, buildServerUrl?: string, repositoryUrl?: string, extraHttpRequestParams?: any): Observable<models.App> {
        return this.appsUploadPostWithHttpInfo(ipa, dsym, notes, notesType, notify, status, strategy, tags, teams, users, mandatory, releaseType, _private, ownerId, commitSha, buildServerUrl, repositoryUrl, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * Gets &#x60;Apps&#x60;. 
     */
    public appsGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/apps`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
        ];
        
        // authentication (token) required
        if (this.configuration.apiKey)
        {
            headers.set('X-HockeyAppToken', this.configuration.apiKey);
        }
            



        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Upload a new app
     * @param ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android
     * @param dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android.
     * @param notes release notes as Textile or Markdown (after 5k characters note are truncated)
     * @param notesType type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown
     * @param notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers
     * @param status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download
     * @param strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number
     * @param tags restrict download to comma-separated list of tags
     * @param teams restrict download to comma-separated list of team IDs
     * @param users restrict download to comma-separated list of user IDs
     * @param mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory
     * @param releaseType set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise
     * @param _private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;)
     * @param ownerId set to the ID of your organization
     * @param commitSha set to the git commit sha for this build
     * @param buildServerUrl set to the URL of the build job on your build server
     * @param repositoryUrl set to your source repository
     */
    public appsUploadPostWithHttpInfo(ipa: any, dsym?: any, notes?: string, notesType?: number, notify?: number, status?: number, strategy?: string, tags?: Array<string>, teams?: Array<number>, users?: Array<number>, mandatory?: number, releaseType?: number, _private?: boolean, ownerId?: number, commitSha?: string, buildServerUrl?: string, repositoryUrl?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + `/apps/upload`;

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        let formParams = new URLSearchParams();

        // verify required parameter 'ipa' is not null or undefined
        if (ipa === null || ipa === undefined) {
            throw new Error('Required parameter ipa was null or undefined when calling appsUploadPost.');
        }


        // to determine the Content-Type header
        let consumes: string[] = [
            'multipart/form-data'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];
        
        // authentication (token) required
        if (this.configuration.apiKey)
        {
            headers.set('X-HockeyAppToken', this.configuration.apiKey);
        }
            
        headers.set('Content-Type', 'application/x-www-form-urlencoded');


        if (ipa !== undefined) {
            formParams.set('Ipa', <any>ipa); 
        }
        if (dsym !== undefined) {
            formParams.set('dsym', <any>dsym); 
        }
        if (notes !== undefined) {
            formParams.set('notes', <any>notes); 
        }
        if (notesType !== undefined) {
            formParams.set('notes_type', <any>notesType); 
        }
        if (notify !== undefined) {
            formParams.set('notify', <any>notify); 
        }
        if (status !== undefined) {
            formParams.set('status', <any>status); 
        }
        if (strategy !== undefined) {
            formParams.set('strategy', <any>strategy); 
        }
        if (tags !== undefined) {
            formParams.set('tags', <any>tags); 
        }
        if (teams !== undefined) {
            formParams.set('teams', <any>teams); 
        }
        if (users !== undefined) {
            formParams.set('users', <any>users); 
        }
        if (mandatory !== undefined) {
            formParams.set('mandatory', <any>mandatory); 
        }
        if (releaseType !== undefined) {
            formParams.set('release_type', <any>releaseType); 
        }
        if (_private !== undefined) {
            formParams.set('private', <any>_private); 
        }
        if (ownerId !== undefined) {
            formParams.set('owner_id', <any>ownerId); 
        }
        if (commitSha !== undefined) {
            formParams.set('commit_sha', <any>commitSha); 
        }
        if (buildServerUrl !== undefined) {
            formParams.set('build_server_url', <any>buildServerUrl); 
        }
        if (repositoryUrl !== undefined) {
            formParams.set('repository_url', <any>repositoryUrl); 
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: formParams.toString(),
            search: queryParameters,
            responseType: ResponseContentType.Json
        });

        return this.http.request(path, requestOptions);
    }

}
