//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DefaultAPI: APIBase {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func appsGet(completion: ((data: Apps?, error: ErrorType?) -> Void)) {
        appsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - GET /apps
     - Gets `Apps`. 
     - API Key:
       - type: apiKey X-HockeyAppToken 
       - name: token
     - examples: [{contentType=application/json, example={
  "success" : "aeiou",
  "apps" : [ {
    "bundle_identifier" : "aeiou",
    "device_family" : "aeiou",
    "release_type" : "",
    "title" : "aeiou",
    "minimum_os_version" : "aeiou",
    "public_identifier" : "aeiou",
    "platform" : "aeiou",
    "status" : ""
  } ]
}}]

     - returns: RequestBuilder<Apps> 
     */
    public class func appsGetWithRequestBuilder() -> RequestBuilder<Apps> {
        let path = "/apps"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Apps>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     * enum for parameter strategy
     */
    public enum Strategy_appsUploadPost: String { 
        case Add = "add"
        case Replace = "replace"
    }

    /**

     - parameter ipa: (form) file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android 
     - parameter dsym: (form) file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
     - parameter notes: (form) release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
     - parameter notesType: (form) type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
     - parameter notify: (form) notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
     - parameter status: (form) download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
     - parameter strategy: (form) replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
     - parameter tags: (form) restrict download to comma-separated list of tags (optional)
     - parameter teams: (form) restrict download to comma-separated list of team IDs (optional)
     - parameter users: (form) restrict download to comma-separated list of user IDs (optional)
     - parameter mandatory: (form) set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
     - parameter releaseType: (form) set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
     - parameter _private: (form) set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
     - parameter ownerId: (form) set to the ID of your organization (optional)
     - parameter commitSha: (form) set to the git commit sha for this build (optional)
     - parameter buildServerUrl: (form) set to the URL of the build job on your build server (optional)
     - parameter repositoryUrl: (form) set to your source repository (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func appsUploadPost(ipa ipa: NSURL, dsym: NSURL? = nil, notes: String? = nil, notesType: Int32? = nil, notify: Int32? = nil, status: Int32? = nil, strategy: Strategy_appsUploadPost? = nil, tags: [String]? = nil, teams: [Int32]? = nil, users: [Int32]? = nil, mandatory: Int32? = nil, releaseType: Int32? = nil, _private: Bool? = nil, ownerId: Int32? = nil, commitSha: String? = nil, buildServerUrl: String? = nil, repositoryUrl: String? = nil, completion: ((data: App?, error: ErrorType?) -> Void)) {
        appsUploadPostWithRequestBuilder(ipa: ipa, dsym: dsym, notes: notes, notesType: notesType, notify: notify, status: status, strategy: strategy, tags: tags, teams: teams, users: users, mandatory: mandatory, releaseType: releaseType, _private: _private, ownerId: ownerId, commitSha: commitSha, buildServerUrl: buildServerUrl, repositoryUrl: repositoryUrl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     - POST /apps/upload
     - Upload a new app
     - API Key:
       - type: apiKey X-HockeyAppToken 
       - name: token
     - examples: [{contentType=application/json, example={
  "bundle_identifier" : "aeiou",
  "release_type" : "",
  "title" : "aeiou",
  "public_identifier" : "aeiou",
  "platform" : "aeiou"
}}]
     
     - parameter ipa: (form) file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android 
     - parameter dsym: (form) file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
     - parameter notes: (form) release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
     - parameter notesType: (form) type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
     - parameter notify: (form) notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
     - parameter status: (form) download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
     - parameter strategy: (form) replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
     - parameter tags: (form) restrict download to comma-separated list of tags (optional)
     - parameter teams: (form) restrict download to comma-separated list of team IDs (optional)
     - parameter users: (form) restrict download to comma-separated list of user IDs (optional)
     - parameter mandatory: (form) set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
     - parameter releaseType: (form) set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
     - parameter _private: (form) set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
     - parameter ownerId: (form) set to the ID of your organization (optional)
     - parameter commitSha: (form) set to the git commit sha for this build (optional)
     - parameter buildServerUrl: (form) set to the URL of the build job on your build server (optional)
     - parameter repositoryUrl: (form) set to your source repository (optional)

     - returns: RequestBuilder<App> 
     */
    public class func appsUploadPostWithRequestBuilder(ipa ipa: NSURL, dsym: NSURL? = nil, notes: String? = nil, notesType: Int32? = nil, notify: Int32? = nil, status: Int32? = nil, strategy: Strategy_appsUploadPost? = nil, tags: [String]? = nil, teams: [Int32]? = nil, users: [Int32]? = nil, mandatory: Int32? = nil, releaseType: Int32? = nil, _private: Bool? = nil, ownerId: Int32? = nil, commitSha: String? = nil, buildServerUrl: String? = nil, repositoryUrl: String? = nil) -> RequestBuilder<App> {
        let path = "/apps/upload"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "Ipa": ipa,
            "dsym": dsym,
            "notes": notes,
            "notes_type": notesType?.encodeToJSON(),
            "notify": notify?.encodeToJSON(),
            "status": status?.encodeToJSON(),
            "strategy": strategy?.rawValue,
            "tags": tags,
            "teams": teams,
            "users": users,
            "mandatory": mandatory?.encodeToJSON(),
            "release_type": releaseType?.encodeToJSON(),
            "private": _private,
            "owner_id": ownerId?.encodeToJSON(),
            "commit_sha": commitSha,
            "build_server_url": buildServerUrl,
            "repository_url": repositoryUrl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<App>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
