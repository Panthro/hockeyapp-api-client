/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Apps.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Apps::Apps()
{
    m_Success = U("");
    m_SuccessIsSet = false;
    m_AppsIsSet = false;
    
}

Apps::~Apps()
{
}

void Apps::validate() 
{
    // TODO: implement validation
}

web::json::value Apps::toJson() const
{
    web::json::value val = web::json::value::object();
     
    if(m_SuccessIsSet)
    {
        val[U("success")] = ModelBase::toJson(m_Success);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Apps )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            val[U("apps")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void Apps::fromJson(web::json::value& val)
{
    if(val.has_field(U("success")))
    {
        setSuccess(ModelBase::stringFromJson(val[U("success")]));
                
    }
    {
        m_Apps.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("apps")))
        {
        for( auto& item : val[U("apps")].as_array() )
        {
            
            if(item.is_null()) 
            {
                m_Apps.push_back( std::shared_ptr<Apps_apps>(nullptr) );
            }
            else
            {
                std::shared_ptr<Apps_apps> newItem(new Apps_apps());
                newItem->fromJson(item);
                m_Apps.push_back( newItem );
            }
            
        }
        }
    }
    
}

void Apps::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_SuccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("success"), m_Success));
                
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Apps )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0) 
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("apps"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void Apps::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("success")))
    {
        setSuccess(ModelBase::stringFromHttpContent(multipart->getContent(U("success"))));
                
    }
    {
        m_Apps.clear();
        if(multipart->hasContent(U("apps")))
        {            
        
        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("apps"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null()) 
            {
                m_Apps.push_back( std::shared_ptr<Apps_apps>(nullptr) );
            }
            else
            {
                std::shared_ptr<Apps_apps> newItem(new Apps_apps());
                newItem->fromJson(item);
                m_Apps.push_back( newItem );
            }
            
        }
        }
    }
    
}
    
   
utility::string_t Apps::getSuccess() const
{
    return m_Success;
}
void Apps::setSuccess(utility::string_t value)
{
    m_Success = value;
    m_SuccessIsSet = true;
}
bool Apps::successIsSet() const
{
    return m_SuccessIsSet;
}
void Apps::unsetSuccess() 
{
    m_SuccessIsSet = false;
}
std::vector<std::shared_ptr<Apps_apps>>& Apps::getApps()
{
    return m_Apps;
}
bool Apps::appsIsSet() const
{
    return m_AppsIsSet;
}
void Apps::unsetApps() 
{
    m_AppsIsSet = false;
}

}
}
}
}

