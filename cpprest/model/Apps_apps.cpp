/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



#include "Apps_apps.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Apps_apps::Apps_apps()
{
    m_Title = U("");
    m_TitleIsSet = false;
    m_Bundle_identifier = U("");
    m_Bundle_identifierIsSet = false;
    m_Public_identifier = U("");
    m_Public_identifierIsSet = false;
    m_Device_family = U("");
    m_Device_familyIsSet = false;
    m_Minimum_os_version = U("");
    m_Minimum_os_versionIsSet = false;
    m_Release_type = 0;
    m_Release_typeIsSet = false;
    m_Status = 0;
    m_StatusIsSet = false;
    m_Platform = U("");
    m_PlatformIsSet = false;
    
}

Apps_apps::~Apps_apps()
{
}

void Apps_apps::validate() 
{
    // TODO: implement validation
}

web::json::value Apps_apps::toJson() const
{
    web::json::value val = web::json::value::object();
     
    if(m_TitleIsSet)
    {
        val[U("title")] = ModelBase::toJson(m_Title);
    }
    if(m_Bundle_identifierIsSet)
    {
        val[U("bundle_identifier")] = ModelBase::toJson(m_Bundle_identifier);
    }
    if(m_Public_identifierIsSet)
    {
        val[U("public_identifier")] = ModelBase::toJson(m_Public_identifier);
    }
    if(m_Device_familyIsSet)
    {
        val[U("device_family")] = ModelBase::toJson(m_Device_family);
    }
    if(m_Minimum_os_versionIsSet)
    {
        val[U("minimum_os_version")] = ModelBase::toJson(m_Minimum_os_version);
    }
    if(m_Release_typeIsSet)
    {
        val[U("release_type")] = ModelBase::toJson(m_Release_type);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    if(m_PlatformIsSet)
    {
        val[U("platform")] = ModelBase::toJson(m_Platform);
    }
    

    return val;
}

void Apps_apps::fromJson(web::json::value& val)
{
    if(val.has_field(U("title")))
    {
        setTitle(ModelBase::stringFromJson(val[U("title")]));
                
    }
    if(val.has_field(U("bundle_identifier")))
    {
        setBundleIdentifier(ModelBase::stringFromJson(val[U("bundle_identifier")]));
                
    }
    if(val.has_field(U("public_identifier")))
    {
        setPublicIdentifier(ModelBase::stringFromJson(val[U("public_identifier")]));
                
    }
    if(val.has_field(U("device_family")))
    {
        setDeviceFamily(ModelBase::stringFromJson(val[U("device_family")]));
                
    }
    if(val.has_field(U("minimum_os_version")))
    {
        setMinimumOsVersion(ModelBase::stringFromJson(val[U("minimum_os_version")]));
                
    }
    if(val.has_field(U("release_type")))
    {
        setReleaseType(ModelBase::int32_tFromJson(val[U("release_type")]));
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::int32_tFromJson(val[U("status")]));
    }
    if(val.has_field(U("platform")))
    {
        setPlatform(ModelBase::stringFromJson(val[U("platform")]));
                
    }
    
}

void Apps_apps::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("title"), m_Title));
                
    }
    if(m_Bundle_identifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("bundle_identifier"), m_Bundle_identifier));
                
    }
    if(m_Public_identifierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("public_identifier"), m_Public_identifier));
                
    }
    if(m_Device_familyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("device_family"), m_Device_family));
                
    }
    if(m_Minimum_os_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("minimum_os_version"), m_Minimum_os_version));
                
    }
    if(m_Release_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("release_type"), m_Release_type));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
    }
    if(m_PlatformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("platform"), m_Platform));
                
    }
    
}

void Apps_apps::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(U("title"))));
                
    }
    if(multipart->hasContent(U("bundle_identifier")))
    {
        setBundleIdentifier(ModelBase::stringFromHttpContent(multipart->getContent(U("bundle_identifier"))));
                
    }
    if(multipart->hasContent(U("public_identifier")))
    {
        setPublicIdentifier(ModelBase::stringFromHttpContent(multipart->getContent(U("public_identifier"))));
                
    }
    if(multipart->hasContent(U("device_family")))
    {
        setDeviceFamily(ModelBase::stringFromHttpContent(multipart->getContent(U("device_family"))));
                
    }
    if(multipart->hasContent(U("minimum_os_version")))
    {
        setMinimumOsVersion(ModelBase::stringFromHttpContent(multipart->getContent(U("minimum_os_version"))));
                
    }
    if(multipart->hasContent(U("release_type")))
    {
        setReleaseType(ModelBase::int32_tFromHttpContent(multipart->getContent(U("release_type"))));
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::int32_tFromHttpContent(multipart->getContent(U("status"))));
    }
    if(multipart->hasContent(U("platform")))
    {
        setPlatform(ModelBase::stringFromHttpContent(multipart->getContent(U("platform"))));
                
    }
    
}
    
   
utility::string_t Apps_apps::getTitle() const
{
    return m_Title;
}
void Apps_apps::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool Apps_apps::titleIsSet() const
{
    return m_TitleIsSet;
}
void Apps_apps::unsetTitle() 
{
    m_TitleIsSet = false;
}
utility::string_t Apps_apps::getBundleIdentifier() const
{
    return m_Bundle_identifier;
}
void Apps_apps::setBundleIdentifier(utility::string_t value)
{
    m_Bundle_identifier = value;
    m_Bundle_identifierIsSet = true;
}
bool Apps_apps::bundle_identifierIsSet() const
{
    return m_Bundle_identifierIsSet;
}
void Apps_apps::unsetBundle_identifier() 
{
    m_Bundle_identifierIsSet = false;
}
utility::string_t Apps_apps::getPublicIdentifier() const
{
    return m_Public_identifier;
}
void Apps_apps::setPublicIdentifier(utility::string_t value)
{
    m_Public_identifier = value;
    m_Public_identifierIsSet = true;
}
bool Apps_apps::public_identifierIsSet() const
{
    return m_Public_identifierIsSet;
}
void Apps_apps::unsetPublic_identifier() 
{
    m_Public_identifierIsSet = false;
}
utility::string_t Apps_apps::getDeviceFamily() const
{
    return m_Device_family;
}
void Apps_apps::setDeviceFamily(utility::string_t value)
{
    m_Device_family = value;
    m_Device_familyIsSet = true;
}
bool Apps_apps::device_familyIsSet() const
{
    return m_Device_familyIsSet;
}
void Apps_apps::unsetDevice_family() 
{
    m_Device_familyIsSet = false;
}
utility::string_t Apps_apps::getMinimumOsVersion() const
{
    return m_Minimum_os_version;
}
void Apps_apps::setMinimumOsVersion(utility::string_t value)
{
    m_Minimum_os_version = value;
    m_Minimum_os_versionIsSet = true;
}
bool Apps_apps::minimum_os_versionIsSet() const
{
    return m_Minimum_os_versionIsSet;
}
void Apps_apps::unsetMinimum_os_version() 
{
    m_Minimum_os_versionIsSet = false;
}
int32_t Apps_apps::getReleaseType() const
{
    return m_Release_type;
}
void Apps_apps::setReleaseType(int32_t value)
{
    m_Release_type = value;
    m_Release_typeIsSet = true;
}
bool Apps_apps::release_typeIsSet() const
{
    return m_Release_typeIsSet;
}
void Apps_apps::unsetRelease_type() 
{
    m_Release_typeIsSet = false;
}
int32_t Apps_apps::getStatus() const
{
    return m_Status;
}
void Apps_apps::setStatus(int32_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool Apps_apps::statusIsSet() const
{
    return m_StatusIsSet;
}
void Apps_apps::unsetStatus() 
{
    m_StatusIsSet = false;
}
utility::string_t Apps_apps::getPlatform() const
{
    return m_Platform;
}
void Apps_apps::setPlatform(utility::string_t value)
{
    m_Platform = value;
    m_PlatformIsSet = true;
}
bool Apps_apps::platformIsSet() const
{
    return m_PlatformIsSet;
}
void Apps_apps::unsetPlatform() 
{
    m_PlatformIsSet = false;
}

}
}
}
}

