/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Apps_apps.h
 * 
 * 
 */

#ifndef Apps_apps_H_
#define Apps_apps_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Apps_apps
	: public ModelBase
{
public:
    Apps_apps();
    virtual ~Apps_apps();

	/////////////////////////////////////////////
	/// ModelBase overrides
	
    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;
    
 	/////////////////////////////////////////////
	/// Apps_apps members
	   
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    void setTitle(utility::string_t value);
    bool titleIsSet() const;
    void unsetTitle();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBundleIdentifier() const;
    void setBundleIdentifier(utility::string_t value);
    bool bundle_identifierIsSet() const;
    void unsetBundle_identifier();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPublicIdentifier() const;
    void setPublicIdentifier(utility::string_t value);
    bool public_identifierIsSet() const;
    void unsetPublic_identifier();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDeviceFamily() const;
    void setDeviceFamily(utility::string_t value);
    bool device_familyIsSet() const;
    void unsetDevice_family();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMinimumOsVersion() const;
    void setMinimumOsVersion(utility::string_t value);
    bool minimum_os_versionIsSet() const;
    void unsetMinimum_os_version();
    /// <summary>
    /// 
    /// </summary>
    int32_t getReleaseType() const;
    void setReleaseType(int32_t value);
    bool release_typeIsSet() const;
    void unsetRelease_type();
    /// <summary>
    /// 
    /// </summary>
    int32_t getStatus() const;
    void setStatus(int32_t value);
    bool statusIsSet() const;
    void unsetStatus();
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPlatform() const;
    void setPlatform(utility::string_t value);
    bool platformIsSet() const;
    void unsetPlatform();
    
protected:
    utility::string_t m_Title;
    bool m_TitleIsSet;
utility::string_t m_Bundle_identifier;
    bool m_Bundle_identifierIsSet;
utility::string_t m_Public_identifier;
    bool m_Public_identifierIsSet;
utility::string_t m_Device_family;
    bool m_Device_familyIsSet;
utility::string_t m_Minimum_os_version;
    bool m_Minimum_os_versionIsSet;
int32_t m_Release_type;
    bool m_Release_typeIsSet;
int32_t m_Status;
    bool m_StatusIsSet;
utility::string_t m_Platform;
    bool m_PlatformIsSet;
};

}
}
}
}

#endif /* Apps_apps_H_ */
