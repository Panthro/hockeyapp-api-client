/**
 * Hockeyapp Public API wrapper
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DefaultApi.h
 * 
 * 
 */
 
#ifndef DefaultApi_H_
#define DefaultApi_H_


#include "ApiClient.h"

#include "Apps.h"
#include "App.h"
#include <cpprest/details/basic_types.h>
#include "HttpContent.h"

namespace com {
namespace github {
namespace panthro {
namespace hockeyapp {

using namespace io::swagger::client::model;

class  DefaultApi
{
public:
    DefaultApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~DefaultApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Gets &#x60;Apps&#x60;. 
    /// </remarks>
    
    pplx::task<std::shared_ptr<Apps>> appsGet();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Upload a new app
    /// </remarks>
    /// <param name="ipa">file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android</param>/// <param name="dsym">file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)</param>/// <param name="notes">release notes as Textile or Markdown (after 5k characters note are truncated) (optional)</param>/// <param name="notesType">type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)</param>/// <param name="notify">notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)</param>/// <param name="status">download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)</param>/// <param name="strategy">replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)</param>/// <param name="tags">restrict download to comma-separated list of tags (optional)</param>/// <param name="teams">restrict download to comma-separated list of team IDs (optional)</param>/// <param name="users">restrict download to comma-separated list of user IDs (optional)</param>/// <param name="mandatory">set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)</param>/// <param name="releaseType">set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)</param>/// <param name="private">set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)</param>/// <param name="ownerId">set to the ID of your organization (optional)</param>/// <param name="commitSha">set to the git commit sha for this build (optional)</param>/// <param name="buildServerUrl">set to the URL of the build job on your build server (optional)</param>/// <param name="repositoryUrl">set to your source repository (optional)</param>
    pplx::task<std::shared_ptr<App>> appsUploadPost(std::shared_ptr<HttpContent> ipa, std::shared_ptr<HttpContent> dsym, utility::string_t notes, int32_t notesType, int32_t notify, int32_t status, utility::string_t strategy, std::vector<utility::string_t> tags, std::vector<int32_t> teams, std::vector<int32_t> users, int32_t mandatory, int32_t releaseType, bool private, int32_t ownerId, utility::string_t commitSha, utility::string_t buildServerUrl, utility::string_t repositoryUrl);
    
protected:
    std::shared_ptr<ApiClient> m_ApiClient;    
};
    
}
}
}
}

#endif /* DefaultApi_H_ */

