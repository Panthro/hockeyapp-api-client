<?php
/**
 * App
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hockeyapp Public API wrapper
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * App Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class App implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'App';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
        'bundle_identifier' => 'string',
        'public_identifier' => 'string',
        'release_type' => 'int',
        'platform' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
        'bundle_identifier' => 'bundle_identifier',
        'public_identifier' => 'public_identifier',
        'release_type' => 'release_type',
        'platform' => 'platform'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
        'bundle_identifier' => 'setBundleIdentifier',
        'public_identifier' => 'setPublicIdentifier',
        'release_type' => 'setReleaseType',
        'platform' => 'setPlatform'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
        'bundle_identifier' => 'getBundleIdentifier',
        'public_identifier' => 'getPublicIdentifier',
        'release_type' => 'getReleaseType',
        'platform' => 'getPlatform'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PLATFORM_I_OS = 'iOS';
    const PLATFORM_ANDROID = 'Android';
    const PLATFORM_MAC_OS = 'Mac Os';
    const PLATFORM_WINDOWS_PHONE = 'Windows Phone';
    const PLATFORM_CUSTOM = 'Custom';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPlatformAllowableValues()
    {
        return [
            self::PLATFORM_I_OS,
            self::PLATFORM_ANDROID,
            self::PLATFORM_MAC_OS,
            self::PLATFORM_WINDOWS_PHONE,
            self::PLATFORM_CUSTOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['bundle_identifier'] = isset($data['bundle_identifier']) ? $data['bundle_identifier'] : null;
        $this->container['public_identifier'] = isset($data['public_identifier']) ? $data['public_identifier'] : null;
        $this->container['release_type'] = isset($data['release_type']) ? $data['release_type'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["iOS", "Android", "Mac Os", "Windows Phone", "Custom"];
        if (!in_array($this->container['platform'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'platform', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["iOS", "Android", "Mac Os", "Windows Phone", "Custom"];
        if (!in_array($this->container['platform'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets title
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     * @param string $title
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets bundle_identifier
     * @return string
     */
    public function getBundleIdentifier()
    {
        return $this->container['bundle_identifier'];
    }

    /**
     * Sets bundle_identifier
     * @param string $bundle_identifier
     * @return $this
     */
    public function setBundleIdentifier($bundle_identifier)
    {
        $this->container['bundle_identifier'] = $bundle_identifier;

        return $this;
    }

    /**
     * Gets public_identifier
     * @return string
     */
    public function getPublicIdentifier()
    {
        return $this->container['public_identifier'];
    }

    /**
     * Sets public_identifier
     * @param string $public_identifier
     * @return $this
     */
    public function setPublicIdentifier($public_identifier)
    {
        $this->container['public_identifier'] = $public_identifier;

        return $this;
    }

    /**
     * Gets release_type
     * @return int
     */
    public function getReleaseType()
    {
        return $this->container['release_type'];
    }

    /**
     * Sets release_type
     * @param int $release_type
     * @return $this
     */
    public function setReleaseType($release_type)
    {
        $this->container['release_type'] = $release_type;

        return $this;
    }

    /**
     * Gets platform
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     * @param string $platform
     * @return $this
     */
    public function setPlatform($platform)
    {
        $allowed_values = array('iOS', 'Android', 'Mac Os', 'Windows Phone', 'Custom');
        if (!is_null($platform) && (!in_array($platform, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'platform', must be one of 'iOS', 'Android', 'Mac Os', 'Windows Phone', 'Custom'");
        }
        $this->container['platform'] = $platform;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}
