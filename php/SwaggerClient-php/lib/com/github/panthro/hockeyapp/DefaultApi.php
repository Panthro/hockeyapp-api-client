<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Hockeyapp Public API wrapper
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace com.github.panthro.hockeyapp;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache License v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://rink.hockeyapp.net/api/2');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return DefaultApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation appsGet
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Apps
     */
    public function appsGet()
    {
        list($response) = $this->appsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation appsGetWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Apps, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsGetWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/apps";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-HockeyAppToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-HockeyAppToken'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Apps',
                '/apps'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Apps', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Apps', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation appsUploadPost
     *
     * 
     *
     * @param \SplFileObject $ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android (required)
     * @param \SplFileObject $dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
     * @param string $notes release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
     * @param int $notes_type type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
     * @param int $notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
     * @param int $status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
     * @param string $strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
     * @param string[] $tags restrict download to comma-separated list of tags (optional)
     * @param int[] $teams restrict download to comma-separated list of team IDs (optional)
     * @param int[] $users restrict download to comma-separated list of user IDs (optional)
     * @param int $mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
     * @param int $release_type set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
     * @param bool $private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
     * @param int $owner_id set to the ID of your organization (optional)
     * @param string $commit_sha set to the git commit sha for this build (optional)
     * @param string $build_server_url set to the URL of the build job on your build server (optional)
     * @param string $repository_url set to your source repository (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\App
     */
    public function appsUploadPost($ipa, $dsym = null, $notes = null, $notes_type = null, $notify = null, $status = null, $strategy = null, $tags = null, $teams = null, $users = null, $mandatory = null, $release_type = null, $private = null, $owner_id = null, $commit_sha = null, $build_server_url = null, $repository_url = null)
    {
        list($response) = $this->appsUploadPostWithHttpInfo($ipa, $dsym, $notes, $notes_type, $notify, $status, $strategy, $tags, $teams, $users, $mandatory, $release_type, $private, $owner_id, $commit_sha, $build_server_url, $repository_url);
        return $response;
    }

    /**
     * Operation appsUploadPostWithHttpInfo
     *
     * 
     *
     * @param \SplFileObject $ipa file data of the .ipa for iOS, .app.zip for OS X, or .apk file for Android (required)
     * @param \SplFileObject $dsym file data of the .dSYM.zip file (iOS and OS X) or mapping.txt (Android); note that the extension has to be .dsym.zip (case-insensitive) for iOS and OS X and the file name has to be mapping.txt for Android. (optional)
     * @param string $notes release notes as Textile or Markdown (after 5k characters note are truncated) (optional)
     * @param int $notes_type type of release notes. &#x60;0&#x60; for Textile, &#x60;1&#x60; for Markdown (optional)
     * @param int $notify notify testers (can only be set with full-access tokens). &#x60;0&#x60; to not notify, &#x60;1&#x60; to notify all testers that can install this app,  &#x60;2&#x60; to notify all testers (optional)
     * @param int $status download status (can only be set with full-access tokens). &#x60;1&#x60; to not allow users to download the version, &#x60;2&#x60; to make the version available for download (optional)
     * @param string $strategy replace or add build with same build number. &#x60;add&#x60; to add the build as a new build to even if it has the same build number __default__, &#x60;replace&#x60; to replace to a build with the same build number (optional)
     * @param string[] $tags restrict download to comma-separated list of tags (optional)
     * @param int[] $teams restrict download to comma-separated list of team IDs (optional)
     * @param int[] $users restrict download to comma-separated list of user IDs (optional)
     * @param int $mandatory set version as mandatory &#x60;0&#x60; for not mandatory __default__, &#x60;1&#x60; for mandatory (optional)
     * @param int $release_type set the release type of the app. &#x60;0&#x60; for beta __default__  &#x60;1&#x60; for store &#x60;2&#x60; for alpha &#x60;3&#x60; for enterprise (optional)
     * @param bool $private set to &#x60;true&#x60; to enable the private download page (default is &#x60;true&#x60;) (optional)
     * @param int $owner_id set to the ID of your organization (optional)
     * @param string $commit_sha set to the git commit sha for this build (optional)
     * @param string $build_server_url set to the URL of the build job on your build server (optional)
     * @param string $repository_url set to your source repository (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\App, HTTP status code, HTTP response headers (array of strings)
     */
    public function appsUploadPostWithHttpInfo($ipa, $dsym = null, $notes = null, $notes_type = null, $notify = null, $status = null, $strategy = null, $tags = null, $teams = null, $users = null, $mandatory = null, $release_type = null, $private = null, $owner_id = null, $commit_sha = null, $build_server_url = null, $repository_url = null)
    {
        // verify the required parameter 'ipa' is set
        if ($ipa === null) {
            throw new \InvalidArgumentException('Missing the required parameter $ipa when calling appsUploadPost');
        }
        // parse inputs
        $resourcePath = "/apps/upload";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // form params
        if ($ipa !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['Ipa'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($ipa));
            } else {
                $formParams['Ipa'] = '@' . $this->apiClient->getSerializer()->toFormValue($ipa);
            }
        }
        // form params
        if ($dsym !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['dsym'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($dsym));
            } else {
                $formParams['dsym'] = '@' . $this->apiClient->getSerializer()->toFormValue($dsym);
            }
        }
        // form params
        if ($notes !== null) {
            $formParams['notes'] = $this->apiClient->getSerializer()->toFormValue($notes);
        }
        // form params
        if ($notes_type !== null) {
            $formParams['notes_type'] = $this->apiClient->getSerializer()->toFormValue($notes_type);
        }
        // form params
        if ($notify !== null) {
            $formParams['notify'] = $this->apiClient->getSerializer()->toFormValue($notify);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = $this->apiClient->getSerializer()->toFormValue($status);
        }
        // form params
        if ($strategy !== null) {
            $formParams['strategy'] = $this->apiClient->getSerializer()->toFormValue($strategy);
        }
        // form params
        if ($tags !== null) {
            $formParams['tags'] = $this->apiClient->getSerializer()->toFormValue($tags);
        }
        // form params
        if ($teams !== null) {
            $formParams['teams'] = $this->apiClient->getSerializer()->toFormValue($teams);
        }
        // form params
        if ($users !== null) {
            $formParams['users'] = $this->apiClient->getSerializer()->toFormValue($users);
        }
        // form params
        if ($mandatory !== null) {
            $formParams['mandatory'] = $this->apiClient->getSerializer()->toFormValue($mandatory);
        }
        // form params
        if ($release_type !== null) {
            $formParams['release_type'] = $this->apiClient->getSerializer()->toFormValue($release_type);
        }
        // form params
        if ($private !== null) {
            $formParams['private'] = $this->apiClient->getSerializer()->toFormValue($private);
        }
        // form params
        if ($owner_id !== null) {
            $formParams['owner_id'] = $this->apiClient->getSerializer()->toFormValue($owner_id);
        }
        // form params
        if ($commit_sha !== null) {
            $formParams['commit_sha'] = $this->apiClient->getSerializer()->toFormValue($commit_sha);
        }
        // form params
        if ($build_server_url !== null) {
            $formParams['build_server_url'] = $this->apiClient->getSerializer()->toFormValue($build_server_url);
        }
        // form params
        if ($repository_url !== null) {
            $formParams['repository_url'] = $this->apiClient->getSerializer()->toFormValue($repository_url);
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('X-HockeyAppToken');
        if (strlen($apiKey) !== 0) {
            $headerParams['X-HockeyAppToken'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\App',
                '/apps/upload'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\App', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\App', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
